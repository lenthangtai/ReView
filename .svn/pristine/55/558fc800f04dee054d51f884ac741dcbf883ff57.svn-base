using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Configuration;
using System.IO;
using System.Text.RegularExpressions;
using System.Drawing.Drawing2D;
using DevExpress.Office.Utils;
namespace VCB_TEGAKI
{
    public partial class frmCheck : Form
    {
        public int formId;
        public int batchId;
        public int userId;
        public string userName;
        public string batchName;
        public string template;
        public string level;
        Bitmap imageSource;
        Bitmap imageSource2;
        Image imageOriginal = null;
        int demsohang;
        DataTable dtbinary = new DataTable();
        DataTable dtbinary2 = new DataTable();
        bool getanh = false;
        int kt = 0;
        int lbtong;
        byte[] binary;
        string resul;
        private double scale = 1;
        private int numbertrtxt = 0;
        private DAEntry_Entry dAEntry = new DAEntry_Entry();
        private DAEntry_Check dACheck = new DAEntry_Check();
        private BOImageContent_Check img = new BOImageContent_Check();
        //private BOImageContent_Check imgContent = new BOImageContent_Check();
        List<BOImageContent_Check> ListImage = new List<BOImageContent_Check>();   
        private bool finish = false;
        DateTime dtimeBefore = new DateTime();
        double zom = 20;
        double tong1 = 0;
        double tong2 = 0;
        int idreturn;
        private System.Windows.Forms.TextBox txtAutoComplete = new System.Windows.Forms.TextBox();
        DataTable dthct = new DataTable();
        double tyleImageNew = 1;
        Bitmap bm_out;
        int id = 0;
        string maso = "";
        int saveimageid = 0;
        int[] arr2 = Enumerable.Range(1, 1000).ToArray();
        int[] arr3 = Enumerable.Range(1, 1000).ToArray();
        int[] arr4 = Enumerable.Range(1, 1000).ToArray();
        int[] arr8 = Enumerable.Range(1, 1000).ToArray();
        public string[] INFperformance = new string[2];
        List<RichTextBox> lsttxt = new List<RichTextBox>();
        List<Label> lstlb = new List<Label>();
        List<Image> lstimageload = new List<Image>();
        public frmCheck()
        {
            InitializeComponent();
            lsttxt = new List<RichTextBox>() { txt2, txt3, txt4, txt5, txt6, txt7, txt8, txt9, txt10 };
            lstlb = new List<Label>() { lbl2, lbl3, lbl4, lbl5, lbl6, lbl7, lbl8, lbl9, lbl10 };
            //lstlbl2 = new List<Label>() { lbll2, lbll3, lbll4, lbll5, lbll6, lbll7, lbll8, lbll9, lbll10 };
        }
        private void frmCheck_Load(object sender, EventArgs e)
        {
            // set bien toan cuc         
            lsttxt.ForEach(a =>
            {
                a.Enter += new System.EventHandler(this.textBox1_Enter);
                a.KeyDown += new System.Windows.Forms.KeyEventHandler(this.textBox1_KeyDown);
                a.Leave += new System.EventHandler(this.textBox1_Leave);
                a.TextChanged += new System.EventHandler(this.textBox1_TextChanged);
                a.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.textBox1_KeyPress);
                a.MouseDown += new System.Windows.Forms.MouseEventHandler(this.rtxtsbd_MouseDown);
                a.Click += new System.EventHandler(this.txttBox1_Click);
            });

            // lấy id image đã entry để check            
            // check đã entry
                int idimg = dACheck.GetCheck();
                if (idimg == 0)
                {
                    btnSubmit.Enabled = false;
                    btnBack.Enabled = false;
                    finish = true;
                    MessageBox.Show("Batch đã hoàn thành");
                    this.Close();
                    return;
                }
                else
                {
                    try
                    {
                        img = dACheck.GetImageCheck(idimg);
                        imageSource = new Bitmap(Io_Entry.byteArrayToImage(dACheck.getImageOnServer(img.Uri)));
                        imageSource = new Bitmap(imageSource, view_Image_TN.Width, view_Image_TN.Height);
                        view_Image_TN.Image = imageSource;
                        bm_out = (Bitmap)imageSource.Clone();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Sever chưa có ảnh");
                        this.Close();
                        return;
                    }
                }
                Logic(idimg);
            for (int i = 0; i < 9; i++)
            {                
                lsttxt[i].ForeColor = Color.Red;
                lsttxt[i].Text = img.Content1[i+1];
                numbertrtxt = i;
                string s1, s2;
                s1 = img.Content1[i+1];
                s2 = img.Content2[i+1];
                if (s1 != s2)
                {
                    lstlb[i].BackColor = Color.Red;
                }
                c = null;
                c = new int[s1.Length + 1, s2.Length + 1];
                LCS(s1, s2);
                BackTrack(s1, s2, s1.Length, s2.Length);
            }
            if (lsttxt[2].Visible == true)
            {
                txtlb4.Visible = true;
                txtt4.Visible = true;
                txtt4.Text = txt4.Text.Replace("\n", "\r\n");
            }
            if (lsttxt[4].Visible == true)
            {
                txtt6.BringToFront();
                txtt6.Visible = true;
                txtt6.Text = txt6.Text.Replace("\n", "\r\n");
            }
            if (lsttxt[6].Visible == true)
            {
                txtt8.BringToFront();
                txtlb8.Visible = true;
                txtt8.Visible = true;
                txtt8.Text = txt8.Text.Replace("\n", "\r\n");
            }
            txtt2.Text = txt2.Text.Replace("\n", "\r\n");
            txtt3.Text = txt3.Text.Replace("\n", "\r\n");
            // hiển thị user name của user đã entry         
            lblEntry1.Text = img.Ms1 + " - " + img.Name1 + " - " + img.Group1;
            lblEntry2.Text = img.Ms2 + " - " + img.Name2 + " - " + img.Group2;
            lblpage.Text = img.Uri;
            lblsoluong.Text = (dACheck.ImageExistCheck()).ToString();
            dtimeBefore = DateTime.Now;
            timegetanh.Start();
        }
        public Bitmap ResizeHeight(Bitmap image, int newWidth, int newHeight, string message)
        {
            try
            {
                Bitmap newImage = new Bitmap(newWidth, CalculationsHeight(image.Width, image.Height, newWidth));

                using (Graphics gr = Graphics.FromImage(newImage))
                {
                    gr.SmoothingMode = SmoothingMode.AntiAlias;
                    gr.InterpolationMode = InterpolationMode.HighQualityBicubic;
                    gr.PixelOffsetMode = PixelOffsetMode.HighQuality;
                    gr.DrawImage(image, new Rectangle(0, 0, newImage.Width, newImage.Height));

                    var myBrush = new SolidBrush(Color.FromArgb(70, 205, 205, 205));

                    double diagonal = Math.Sqrt(newImage.Width * newImage.Width + newImage.Height * newImage.Height);

                    Rectangle containerBox = new Rectangle();

                    containerBox.X = (int)(diagonal / 10);
                    float messageLength = (float)(diagonal / message.Length * 1);
                    containerBox.Y = -(int)(messageLength / 1.6);

                    Font stringFont = new Font("verdana", messageLength);

                    StringFormat sf = new StringFormat();

                    float slope = (float)(Math.Atan2(newImage.Height, newImage.Width) * 180 / Math.PI);

                    gr.RotateTransform(slope);
                    gr.DrawString(message, stringFont, myBrush, containerBox, sf);
                    return newImage;
                }
            }
            catch (Exception exc)
            {
                throw exc;
            }
        }
        public int CalculationsHeight(decimal w1, decimal h1, int newWidth)
        {
            decimal height = 0;
            decimal ratio = 0;


            if (newWidth < w1)
            {
                ratio = w1 / newWidth;
                height = h1 / ratio;

                return Convert.ToInt32(height);
            }

            if (w1 < newWidth)
            {
                ratio = newWidth / w1;
                height = h1 * ratio;
                return Convert.ToInt32(height);
            }

            return Convert.ToInt32(height);
        }
        public Bitmap ResizeWith(Bitmap image, int newWidth, int newHeight, string message)
        {
            try
            {
                Bitmap newImage = new Bitmap(CalculationsWith(image.Height, image.Width, newHeight), newHeight);

                using (Graphics gr = Graphics.FromImage(newImage))
                {
                    gr.SmoothingMode = SmoothingMode.AntiAlias;
                    gr.InterpolationMode = InterpolationMode.HighQualityBicubic;
                    gr.PixelOffsetMode = PixelOffsetMode.HighQuality;
                    gr.DrawImage(image, new Rectangle(0, 0, newImage.Width, newImage.Height));

                    var myBrush = new SolidBrush(Color.FromArgb(70, 205, 205, 205));

                    double diagonal = Math.Sqrt(newImage.Width * newImage.Width + newImage.Height * newImage.Height);

                    Rectangle containerBox = new Rectangle();

                    containerBox.X = (int)(diagonal / 10);
                    float messageLength = (float)(diagonal / message.Length * 1);
                    containerBox.Y = -(int)(messageLength / 1.6);

                    Font stringFont = new Font("verdana", messageLength);

                    StringFormat sf = new StringFormat();

                    float slope = (float)(Math.Atan2(newImage.Height, newImage.Width) * 180 / Math.PI);

                    gr.RotateTransform(slope);
                    gr.DrawString(message, stringFont, myBrush, containerBox, sf);
                    return newImage;
                }
            }
            catch (Exception exc)
            {
                throw exc;
            }
        }

        public int CalculationsWith(decimal w1, decimal h1, int newWidth)
        {
            decimal height = 0;
            decimal ratio = 0;


            if (newWidth < w1)
            {
                ratio = w1 / newWidth;
                height = h1 / ratio;
                return Convert.ToInt32(height);
            }

            if (w1 < newWidth)
            {
                ratio = newWidth / w1;
                height = h1 * ratio;
                return Convert.ToInt32(height);
            }

            return Convert.ToInt32(height);
        }
        private void ExitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.Close();
        }
        #region focus
        public void Logic(int id)
        {
            //try
            //{
            //    for (int i = 0; i < lsttxt.Count; i++)
            //    {
            //        lstlbl[i].BackColor = SystemColors.Control;
            //        lstlbl2[i].BackColor = SystemColors.Control;
            //    }
            //    string resul = dACheck.Get_Result(id);
            //    string str = dACheck.Get_Rules(resul);
            //    string[] arrrole = str.Split(',');
            //    lsttxt[7].Text = "";
            //    for (int i = 0; i < arrrole.Length; i++)
            //    {
            //        lstlbl2[Convert.ToInt32(arrrole[i]) - 2].BackColor = Color.PowderBlue;
            //    }
            //}
            //catch
            //{
            //    for (int i = 0; i < lsttxt.Count; i++)
            //    {
            //        lsttxt[i].Visible = true;
            //        lstlbl[i].Visible = true;
            //        lstlbl2[i].Visible = true;
            //    }
            //}
            resul = "";
            string str = "";
            binary = null;
            string[] arrrole = null;
            int temid = 0;
            for (int i = 0; i < lsttxt.Count; i++)
            {

                lsttxt[i].Visible = false;
                lstlb[i].Visible = false;
            }
            resul = dAEntry.Get_Result(id);
            str = dAEntry.Get_Rules(resul);
            maso = dAEntry.Get_maso(resul);
            temid = dAEntry.Get_Temid(resul);
            arrrole = str.Split(',');
            lsttxt[7].Text = "";
            for (int i = 0; i < arrrole.Length; i++)
            {
                lsttxt[Convert.ToInt32(arrrole[i]) - 2].Visible = true;
                lstlb[Convert.ToInt32(arrrole[i]) - 2].Visible = true;
            }
            //lsttxt[7].Visible = false;
            //lstlb[7].Visible = false;
            //lsttxt[8].Visible = false;
            //lstlb[8].Visible = false;
            //if (temid > 6 && temid < 13)
            //{
            //    lsttxt[7].Enabled = false;
            //    lsttxt[7].Visible = true;
            //    lsttxt[8].Visible = true;
            //    lstlb[7].Visible = true;
            //    lstlb[8].Visible = true;
            //}
            if (lsttxt[4].Visible == true)
            {
                lsttxt[4].Focus();
                return;
            }
            else if (lsttxt[3].Visible == true)
            {
                lsttxt[3].Focus();
                return;
            }
            else if (lsttxt[5].Visible == true)
            {
                lsttxt[5].Focus();
                return;
            }
            else if (lsttxt[8].Visible == true)
            {
                lsttxt[8].Focus();
                return;
            }
            else if (lsttxt[0].Visible == true)
            {
                lsttxt[0].Focus();
                return;
            }
            else if (lsttxt[1].Visible == true)
            {
                lsttxt[1].Focus();
                return;
            }
            else if (lsttxt[2].Visible == true)
            {
                lsttxt[2].Focus();
                return;
            }
            else if (lsttxt[6].Visible == true)
            {
                lsttxt[6].Focus();
                return;
            }
        #endregion
        }
        private void frmCheck_FormClosing(object sender, FormClosingEventArgs e)
        {
            timegetanh.Stop();
            try
            {
                if (!finish)
                {
                    dACheck.Return_HitpointCheck(img.Id);
                    if (ListImage.Count > 0)
                    {
                        for (int i = 0; i < ListImage.Count; i++)
                        {
                            dACheck.Return_HitpointCheck(ListImage[i].Id);
                        }
                    }
                }
            }
            catch { }
            return;
        }      

        #region Compare string
        static int max(int a, int b)
        {
            return (a > b) ? a : b;
        }
        static int[,] c;
        //Prints one LCS
        private string BackTrack(string s1, string s2, int i, int j)
        {
            if (i == 0 || j == 0)
                return "";
            if (s1[i - 1] == s2[j - 1])
            {
                lsttxt[numbertrtxt].SelectionStart = i - 1;
                lsttxt[numbertrtxt].SelectionLength = 1;
                lsttxt[numbertrtxt].SelectionColor = Color.Black;
                return BackTrack(s1, s2, i - 1, j - 1) + s1[i - 1];
            }
            else if (c[i - 1, j] > c[i, j - 1])
                return BackTrack(s1, s2, i - 1, j);

            else
                return BackTrack(s1, s2, i, j - 1);

        }
        //Nghịch       
        private string BackTrack2(string s1, string s2, int i, int j)
        {
            if (i == 0 || j == 0)
                return "";
            if (s1[i - 1] == s2[j - 1])
            {
                return BackTrack2(s1, s2, i - 1, j - 1) + s1[i - 1];
            }
            else if (c[i - 1, j] > c[i, j - 1])
                return BackTrack2(s1, s2, i - 1, j);

            else
                return BackTrack2(s1, s2, i, j - 1);

        }
        static int LCS(string s1, string s2)
        {
            for (int i = 1; i <= s1.Length; i++)
                c[i, 0] = 0;
            for (int i = 1; i <= s2.Length; i++)
                c[0, i] = 0;

            for (int i = 1; i <= s1.Length; i++)
                for (int j = 1; j <= s2.Length; j++)
                {
                    if (s1[i - 1] == s2[j - 1])
                        c[i, j] = c[i - 1, j - 1] + 1;
                    else
                    {
                        c[i, j] = max(c[i - 1, j], c[i, j - 1]);

                    }

                }

            return c[s1.Length, s2.Length];

        }
        #endregion
        
        
        protected System.Drawing.Point clickPosition;
        protected System.Drawing.Point scrollPosition;
        private void picBoxImage_MouseDown(object sender, MouseEventArgs e)
        {
            this.clickPosition.X = e.X;
            this.clickPosition.Y = e.Y;
        }       
        private void frmCheck_KeyDown(object sender, KeyEventArgs e)
        {
            //if (e.KeyCode == Keys.Z)
            //{
            //    if (kt == 0)
            //    {
            //        picBoxImage.Image = new Bitmap(imageOriginal, panel1.Width - 10, panel1.Height - 10);
            //        kt = 1;
            //    }
            //    else
            //    {
            //        picBoxImage.Image = new Bitmap(imageSource2, panel1.Width - 10, panel1.Height - 10);
            //        kt = 0;
            //    }
            //}
            if (e.Control)
            {                
                if (e.KeyCode == Keys.F)
                {
                    button1_Click(sender, e);
                    e.Handled = true;
                }
                if (e.KeyCode == Keys.Divide)
                {
                    
                }
                else if (e.KeyCode == Keys.Multiply)
                {
                    
                }
                if (e.KeyCode == Keys.Right)
                {
                    btnrtr_Click(sender, e);
                }
                if (e.KeyCode == Keys.Left)
                {
                    btnrtl_Click(sender, e);
                }
            }
        }
        private void button1_Click(object sender, EventArgs e)
        {
            imageSource = (Bitmap)bm_out.Clone();
            imageSource = new Bitmap(imageSource, view_Image_TN.Width, view_Image_TN.Height);
            view_Image_TN.Image = imageSource;
        }       
        private void textBox1_Enter(object sender, EventArgs e)
        {
            RichTextBox tb = (RichTextBox)sender;
            tb.BackColor = Color.PowderBlue;
            tb.SelectionStart = tb.Text.Length + 1;           
        }
        private void textBox1_TextChanged(object sender, EventArgs e)
        {
            RichTextBox tb = (RichTextBox)sender;           
        }
        private void textBox1_KeyPress(object sender, KeyPressEventArgs e)
        {
            RichTextBox tb = (RichTextBox)sender;
            if (e.KeyChar == 43)
                e.Handled = true;
            if (e.KeyChar == 13)
                e.Handled = true;            
        }
        private void textBox1_KeyDown(object sender, KeyEventArgs e)
        {
            RichTextBox tb = (RichTextBox)sender;
            if (tb.TabIndex > 5 && tb.TabIndex < 10)
            {
                if (e.KeyCode == Keys.Add)
                {
                    tb.Text = tb.Text + "\n";
                }
            }
            if (e.Control)
            {
                if (e.KeyCode == Keys.NumPad1)
                {
                    tb.Text = tb.Text + "4977564";
                    tb.SelectionStart = tb.Text.Length + 1;
                }
                if (e.KeyCode == Keys.NumPad2)
                {
                    tb.Text = tb.Text + "AM必着";
                    tb.SelectionStart = tb.Text.Length + 1;
                }
                if (e.KeyCode == Keys.NumPad3)
                {
                    tb.Text = tb.Text + "階定番分";
                    tb.SelectionStart = tb.Text.Length + 1;
                }
                if (e.KeyCode == Keys.NumPad4)
                {
                    tb.Text = tb.Text + "様";
                    tb.SelectionStart = tb.Text.Length + 1;
                }
            }
            if (e.KeyCode == Keys.Add)
            {
                try
                {

                    string[] arrtach = null;
                    arrtach = tb.Text.Split('\n').ToArray();
                    tb.Text = tb.Text + arrtach[arrtach.Length - 2] + "\n";
                    tb.SelectionStart = tb.Text.Length;
                }
                catch
                {
                }
            }           
        }
        private void txttBox1_Click(object sender, EventArgs e)
        {
            RichTextBox tb = (RichTextBox)sender;          
        }
        private void textBox1_Leave(object sender, EventArgs e)
        {
            RichTextBox tb = (RichTextBox)sender;
            tb.BackColor = SystemColors.Window;
        }      
        private void rtxtsbd_MouseDown(object sender, MouseEventArgs e)
        {
            RichTextBox rtxt = (RichTextBox)sender;
            if (e.Button == MouseButtons.Right)
            {
                if (rtxt.Text == img.Content1[rtxt.TabIndex + 1])
                {
                    rtxt.SelectionStart = 0;
                    rtxt.SelectionLength = rtxt.Text.Length;
                    rtxt.SelectionColor = Color.Red;
                    rtxt.Text = img.Content2[rtxt.TabIndex + 1];
                    if (rtxt.TabIndex == 6)
                    { txtt8.Text = rtxt.Text.Replace("\n", "\r\n"); }
                    if (rtxt.TabIndex == 4)
                    { txtt6.Text = rtxt.Text.Replace("\n", "\r\n"); }
                    numbertrtxt = rtxt.TabIndex;
                    string s1, s2;
                    s1 = img.Content2[rtxt.TabIndex + 1];
                    s2 = img.Content1[rtxt.TabIndex + 1];
                    c = null;
                    c = new int[s1.Length + 1, s2.Length + 1];
                    LCS(s1, s2);
                    BackTrack(s1, s2, s1.Length, s2.Length);
                }
                else if (rtxt.Text == img.Content2[rtxt.TabIndex + 1])
                {
                    rtxt.SelectionStart = 0;
                    rtxt.SelectionLength = rtxt.Text.Length;
                    rtxt.SelectionColor = Color.Red;
                    rtxt.Text = img.Content1[rtxt.TabIndex + 1];
                    if (rtxt.TabIndex == 6)
                    { txtt8.Text = rtxt.Text.Replace("\n", "\r\n"); }
                    if (rtxt.TabIndex == 4)
                    { txtt6.Text = rtxt.Text.Replace("\n", "\r\n"); }
                    numbertrtxt = rtxt.TabIndex;
                    string s1, s2;
                    s1 = img.Content1[rtxt.TabIndex + 1];
                    s2 = img.Content2[rtxt.TabIndex + 1];
                    c = null;
                    c = new int[s1.Length + 1, s2.Length + 1];
                    LCS(s1, s2);
                    BackTrack(s1, s2, s1.Length, s2.Length);
                }
                else
                {
                    rtxt.SelectionStart = 0;
                    rtxt.SelectionLength = rtxt.Text.Length;
                    rtxt.SelectionColor = Color.Red;
                    rtxt.Text = img.Content1[rtxt.TabIndex + 1];
                    if (rtxt.TabIndex == 6)
                    { txtt8.Text = rtxt.Text.Replace("\n", "\r\n"); }
                    if (rtxt.TabIndex == 4)
                    { txtt6.Text = rtxt.Text.Replace("\n", "\r\n"); }
                    numbertrtxt = rtxt.TabIndex;
                    string s1, s2;
                    s1 = img.Content1[rtxt.TabIndex + 1];
                    s2 = img.Content2[rtxt.TabIndex + 1];
                    c = null;
                    c = new int[s1.Length + 1, s2.Length + 1];
                    LCS(s1, s2);
                    BackTrack(s1, s2, s1.Length, s2.Length);
                }
            }
        }

        private void timegetanh_Tick(object sender, EventArgs e)
        {
            if (ListImage.Count < 2)
            {
                try
                {
                    int idmg = dACheck.GetCheck();
                    if (idmg > 0)
                    {
                        BOImageContent_Check img2 = dACheck.GetImageCheck(idmg);
                        try
                        {
                            img2.Imagesource = new Bitmap(Io_Entry.byteArrayToImage(dACheck.getImageOnServer(img2.Uri)));
                        }
                        catch { img2.Imagesource = null; }
                        ListImage.Add(img2);
                        if (ListImage.Count == 0)
                        {
                            getanh = true;
                        }
                    }
                }
                catch
                {
                }
            }           
        }

        private void btnSubmit_Click_1(object sender, EventArgs e)
        {
            dthct = null;
            zom = 20;
            bm_out = null;
            string[] arr2 = null;
            try
            {
                arr2 = txt2.Text.Split('\n').ToArray();
            }
            catch
            {
            }
            // update image content vao DB
            string rsEntr1 = "";
            string rsEntr2 = "";
            for (int i = 1; i < 10; i++)
            {
                rsEntr1 = rsEntr1 + img.Content1[i] + "|";
                rsEntr2 = rsEntr2 + img.Content2[i] + "|";
                if (i == 9)
                {
                    rsEntr1 = rsEntr1 + img.Content1[i];
                    rsEntr2 = rsEntr2 + img.Content2[i];
                }
            }

            //string rsEntr1 = String.Join("|", img.Content1);
            string rsCheck = "";
            //string[] arr = lsttxt.Select(x => x.Text.Trim()).ToArray();
            //for (int i = 0; i < arr.Length; i++)
            //{
            //    if (i == 0 || i == 1 || i == 2 || i == 6)
            //    {
            //        string ktdong = arr[i].ToString();
            //        if (ktdong != "")
            //        {
            //            string[] arrkt = null;
            //            arrkt = ktdong.Split('\n').ToArray();
            //            if (arrkt.Length == 1)
            //                for (int j = 1; j < arr2.Length; j++)
            //                {
            //                    arr[i] = arr[i] + "\n";
            //                }
            //            else if (arrkt.Length > 1)
            //            {
            //                for (int l = 0; l < (arr2.Length - arrkt.Length); l++)
            //                {
            //                    arr[i] = arr[i] + "\n";
            //                }
            //            }
            //        }
            //        else if (ktdong == "")
            //        {
            //            for (int k = 1; k < arr2.Length; k++)
            //            {
            //                arr[i] = arr[i] + "\n";
            //            }
            //        }
            //    }
            //}
            //string imgContentContent = String.Join("|", arr);
            string imgContentContent = txt2.Text + "|" + txt3.Text + "|" + txt4.Text + "|" + txt5.Text + "|" + txtt6.Text + "|" + txt7.Text + "|" + txtt8.Text + "|" + txt9.Text + "|" + txt10.Text;
            rsCheck = imgContentContent;
            lsttxt.ForEach(s => { s.Text = ""; s.BackColor = SystemColors.Window; });
            //Lỗi sai E1
            c = null;
            c = new int[rsCheck.Length + 1, rsEntr1.Length + 1];
            int vlLCS = LCS(rsCheck, rsEntr1);
            if (rsEntr1.Length > rsCheck.Length)
                img.Loisai1 = rsEntr1.Length - vlLCS;
            else
                img.Loisai1 = rsCheck.Length - vlLCS;
            //Lỗi sai E2 
            c = null;
            c = new int[rsCheck.Length + 1, rsEntr2.Length + 1];
            vlLCS = LCS(rsCheck, rsEntr2);
            if (rsEntr2.Length > rsCheck.Length)
                img.Loisai2 = rsEntr2.Length - vlLCS;
            else
                img.Loisai2 = rsCheck.Length - vlLCS;
            // set image content    
            img.Tongkytu = rsCheck.Length - 8;
            img.Result = img.Content1[0] + "|" + imgContentContent + "|" + img.Content1[10] + "|" + img.Content1[11] + "|" + img.Content1[12] + "|" + img.Content1[13];
            img.CheckerId = userId;
            TimeSpan span = DateTime.Now - dtimeBefore;
            int ms = (int)span.TotalMilliseconds;
            // add image content
            try
            {               
                dACheck.UpdateResutlCheck(img,ms);
            }
            catch (Exception exception)
            {
                // rool back hitpoint
                dACheck.SetHitPointImage(img.Id);
                MessageBox.Show(exception.Message, "error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                this.Close();
                return;
            }
            saveimageid = img.Id;
            // load image mới lên form
            // lấy id image entry
            imageSource = null;
            if (ListImage.Count > 0)
            {
                img = ListImage[0];
                ListImage.RemoveAt(0);
            }
            else
            {
                if (getanh)
                {
                    finish = true;
                    this.Close();
                    return;
                }
                else
                {
                    while (ListImage.Count == 0)
                    {
                        btnSubmit.Enabled = false;
                        btnBack.Enabled = false;
                        finish = true;
                        MessageBox.Show("Batch đã hoàn thành");
                        this.Close();
                        return;
                    }
                    img = ListImage[0];
                    ListImage.RemoveAt(0);
                }
            }
            try
            {
                //Get Image
                imageSource = (Bitmap)img.Imagesource.Clone();
                if (imageSource.Height > imageSource.Width)
                {
                    view_Image_TN.Image = ResizeHeight(imageSource, view_Image_TN.Width, view_Image_TN.Height, "1");
                }
                else
                {
                    view_Image_TN.Image = ResizeWith(imageSource, view_Image_TN.Width, view_Image_TN.Height, "1");
                }
                //view_Image_TN.Image = imageSource;
                bm_out = (Bitmap)imageSource.Clone();
            }
            catch
            {
                MessageBox.Show("Không load được ảnh: " + img.Uri, "error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                this.Close();
                return;
            }
            Logic(img.Id);
            for (int i = 0; i < 9; i++)
            {
                lsttxt[i].ForeColor = Color.Red;
                lsttxt[i].Text = img.Content1[i + 1];              
                numbertrtxt = i;
                string s1, s2;
                s1 = img.Content1[i + 1];
                s2 = img.Content2[i + 1];
                if (s1 != s2)
                {
                    lstlb[i].BackColor = Color.Red;
                }
                c = null;
                c = new int[s1.Length + 1, s2.Length + 1];
                LCS(s1, s2);
                BackTrack(s1, s2, s1.Length, s2.Length);
            }
            if (lsttxt[2].Visible == true)
            {
                txtlb4.Visible = true;
                txtt4.Visible = true;
                txtt4.Text = txt4.Text.Replace("\n", "\r\n");
            }
            if (lsttxt[4].Visible == true)
            {
                txtt6.BringToFront();
                txtt6.Visible = true;
                txtt6.Text = txt6.Text.Replace("\n", "\r\n");
            }
            if (lsttxt[6].Visible == true)
            {
                txtt8.BringToFront();
                txtlb8.Visible = true;
                txtt8.Visible = true;
                txtt8.Text = txt8.Text.Replace("\n", "\r\n");
            }
            txtt2.Text = txt2.Text.Replace("\n", "\r\n");
            txtt3.Text = txt3.Text.Replace("\n", "\r\n");
            // hiển thị user name của user đã entry            
            lblEntry1.Text = img.Ms1 + " - " + img.Name1 + " - " + img.Group1;
            lblEntry2.Text = img.Ms2 + " - " + img.Name2 + " - " + img.Group2;
            lblpage.Text = img.Uri;
            lblsoluong.Text = (dACheck.ImageExistCheck() + ListImage.Count).ToString();
        }

        private void btnBack_Click(object sender, EventArgs e)
        {
            zom = 20;
            bm_out = null;
            if (saveimageid == 0)
            {
                MessageBox.Show("Can not back", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            // load image mới lên form
            // lấy id image entry
            id = 0;
            try
            {
                dACheck.SetHitPointImage(img.Id);
                dACheck.Set_result_null(saveimageid);
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message, "error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                this.Close();
                return;
            }
            //lấy Imageid trước           
            try
            {
                id = saveimageid;
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message, "error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                this.Close();
                return;
            }
            saveimageid = 0;

            // lay image đã entry
            try
            {
                img = dACheck.GetImageCheck(id);
                    dtbinary = dACheck.Get_BinaryCheck(img.Uri, img.Id);               
            }
            catch (Exception ex)
            {
                //MessageBox.Show(ex.Message, "error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                MessageBox.Show("Batch đã hoàn thành");
                finish = true;
                this.Close();
                return;
            }

            // lay image free
            try
            {
                imageSource = new Bitmap(Io_Entry.byteArrayToImage((byte[])dtbinary.Rows[0][0]));
            }
            catch (Exception exception)
            {
                MessageBox.Show("Batch đã hoàn thành");
                finish = true;
                this.Close();
                return;
            }

            //Get Image
            try
            {
                imageSource = (Bitmap)img.Imagesource.Clone();
                if (imageSource.Height > imageSource.Width)
                {
                    view_Image_TN.Image = ResizeHeight(imageSource, view_Image_TN.Width, view_Image_TN.Height, "1");
                }
                else
                {
                    view_Image_TN.Image = ResizeWith(imageSource, view_Image_TN.Width, view_Image_TN.Height, "1");
                }
                //view_Image_TN.Image = imageSource;
                bm_out = (Bitmap)imageSource.Clone();
            }
            catch
            {
                MessageBox.Show("Server chưa có ảnh: " + img.Uri, "error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                this.Close();
                return;
            }
            Logic(img.Id);
            for (int i = 0; i < 9; i++)
            {
                lsttxt[i].ForeColor = Color.Red;
                lsttxt[i].Text = img.Content1[i + 1];
                numbertrtxt = i;
                string s1, s2;
                s1 = img.Content1[i + 1];
                s2 = img.Content2[i + 1];
                if (s1 != s2)
                {
                    lstlb[i].BackColor = Color.Red;
                }
                c = null;
                c = new int[s1.Length + 1, s2.Length + 1];
                LCS(s1, s2);
                BackTrack(s1, s2, s1.Length, s2.Length);
            }
            if (lsttxt[2].Visible == true)
            {
                txtlb4.Visible = true;
                txtt4.Visible = true;
                txtt4.Text = txt4.Text.Replace("\n", "\r\n");
            }
            if (lsttxt[4].Visible == true)
            {
                txtt6.BringToFront();
                txtt6.Visible = true;
                txtt6.Text = txt6.Text.Replace("\n", "\r\n");
            }
            if (lsttxt[6].Visible == true)
            {
                txtt8.BringToFront();
                txtlb8.Visible = true;
                txtt8.Visible = true;
                txtt8.Text = txt8.Text.Replace("\n", "\r\n");
            }
            txtt2.Text = txt2.Text.Replace("\n", "\r\n");
            txtt3.Text = txt3.Text.Replace("\n", "\r\n");
            // hiển thị user name của user đã entry         
            lblEntry1.Text = img.Ms1 + " - " + img.Name1 + " - " + img.Group1;
            lblEntry2.Text = img.Ms2 + " - " + img.Name2 + " - " + img.Group2;
            lblpage.Text = img.Uri;
            lblsoluong.Text = (dACheck.ImageExistCheck()).ToString();
        }
        private void btnsop_Click(object sender, EventArgs e)
        {
            FrmSOP frmsop = new FrmSOP();
            binary = dAEntry.Get_imgsop(resul);
            frmsop.getimg = binary;
            frmsop.ShowDialog();
        }

        private void btnrtr_Click(object sender, EventArgs e)
        {
            view_Image_TN.RotateImage("270");
        }

        private void btnrtl_Click(object sender, EventArgs e)
        {
            view_Image_TN.RotateImage("90");
        }

        private void txt2_TextChanged(object sender, EventArgs e)
        {
            txtt2.Text = txt2.Text.Replace("\n", "\r\n");
            int sohang = txtt2.Text.Split('\r').Length;
            txtlb2.Text = string.Join("\r\n", arr2.Take(sohang));
            txtlb2.AppendText("\r\n");
        }

        private void txt3_TextChanged(object sender, EventArgs e)
        {
            txtt3.Text = txt3.Text.Replace("\n", "\r\n");
            int sohang = txtt3.Text.Split('\r').Length;
            txtlb3.Text = string.Join("\r\n", arr3.Take(sohang));
            txtlb3.AppendText("\r\n");
        }

        private void txt4_TextChanged(object sender, EventArgs e)
        {
            if (txt4.Visible == false)
            {
                txtt4.Text = txt4.Text.Replace("\n", "\r\n");
                int sohang = txtt4.Text.Split('\r').Length;
                txtlb4.Text = string.Join("\r\n", arr4.Take(sohang));
                txtlb4.AppendText("\r\n");
            }
        }

        private void txtt8_TextChanged(object sender, EventArgs e)
        {
            //if (txt8.Visible == true)
            //{
            //    txt8.Text = txtt8.Text.Replace("\r\n", "\n");
                int sohang = txtt8.Text.Split('\r').Length;
                txtlb8.Text = string.Join("\r\n", arr8.Take(sohang));
                txtlb8.AppendText("\r\n");
            //}
        }

        private void txt8_Click(object sender, EventArgs e)
        {
            chckcheck.Checked = false;
            txt8.SendToBack();
            txt6.SendToBack();
        }

        private void chckcheck_CheckedChanged(object sender, EventArgs e)
        {
            if (chckcheck.Checked)
            {
                txt6.BringToFront();
                txt8.BringToFront();
            }
            else
            {
                txt6.SendToBack();
                txt8.SendToBack();
            }
        }
        private void view_Image_TN_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Middle)
                view_Image_TN.RotateImage("90");
        }

        private void txt6_Click(object sender, EventArgs e)
        {
            chckcheck.Checked = false;
            txt6.SendToBack();
            txt8.SendToBack();
        }

        private void txtt6_TextChanged(object sender, EventArgs e)
        {
            txt6.Text = txtt6.Text;
        }
    }
}

