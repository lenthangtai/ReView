using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Configuration;
using System.Text.RegularExpressions;
using System.Drawing.Imaging;
namespace VCB_TEGAKI
{
    public partial class FrmCheckP : Form
    {
        public static bool selecthitpoint = true;
        public int batchId;
        public int userId;
        public int pair;
        public int ImgId;
        private double scale = 1;
        public string userName;
        public string batchName;
        private int numbertrtxt = 0;
        int chuoiclick = 0;
        int idimg;
        bool getanh = false;
        DataTable dtbinary = new DataTable();
        DataTable dtbinary2;
        DataTable get_lstimage = new DataTable();
        DataTable get_lstimage2 = new DataTable();
        DataTable dtcontent = new DataTable();
        Bitmap imageSource;
        Image Image;
        Image Image2;
        Image Image3;
        List<BOImageContent_Check> ListImage = new List<BOImageContent_Check>();
        private DAEntry_Check dACheck = new DAEntry_Check();
        private BOImageContent_Check img = new BOImageContent_Check();
        private bool finish = false;
        DataTable dtall = new DataTable();
        DataTable dtallkt = new DataTable();
        private int zoomLevel;
        bool check = false;
        bool zoom = false;
        int tbindex = 0;
        int[] INFImage;
        int limitTime = 0;
        //var 140716
        int zom = 20;
        double tyle;
        double tyleImageNew = 1;
        Bitmap bm_out;
        List<TextBox> lsttxt = new List<TextBox>();
        double tong1 = 0;
        double tong2 = 0;
        int demsohang;
        string chuoi;
        string chuoi2;
        DateTime dtimeBefore = new DateTime();
        public FrmCheckP()
        {
            InitializeComponent();
        }

        private void frmEntry_Load(object sender, EventArgs e)
        {
            // hiển thị thông tin user
            this.Text = "Entry" + "                     UserName: " + userName;
            lblusername.Text = userName;
            lblbatchname.Text = batchName;
            dtall = dACheck.Get_AllTemplateName();
            dtallkt = dACheck.Get_AllTemplateName2();
            grTemp.DataSource = dtall;
            grTempV.RowCellClick += gridView1_RowCellClick;
            grTempV.Columns[0].Visible = false;
            idimg = dACheck.GetIdCheckP();
            if (idimg == 0)
            {
                btnNotgood.Enabled = false;
                finish = true;
                MessageBox.Show("Batch đã hoàn thành");
                this.Close();
                return;
            }
            else
            {
                try
                {
                    img = dACheck.GetImageCheckP(idimg);
                    imageSource = new Bitmap(Io_Entry.byteArrayToImage(dACheck.getImageOnServer(img.Uri)));
                    view_Image_TN.Image = imageSource;
                    view_Image_TN.CurrentZoom = 0.2f;
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Sever chưa có ảnh");
                    this.Close();
                    return;
                }
            }
            txtTemp.ForeColor = Color.Red;
            txtTemp.Text = img.Contentp1;
            numbertrtxt = 0;
            string s1, s2;
            s1 = img.Contentp1;
            s2 = img.Contentp2;
            c = null;
            c = new int[s1.Length + 1, s2.Length + 1];
            LCS(s1, s2);
            BackTrack(s1, s2, s1.Length, s2.Length);
            try
            {
                lbluser1.Text = img.Ms1 + " - " + img.Name1 + " - " + img.Group1;
                lbluser2.Text = img.Ms2 + " - " + img.Name2 + " - " + img.Group2;
            }
            catch
            {
                lbluser1.Text = "";
                lbluser2.Text = "";
            }
            lblpage.Text = img.Uri;
            grTempV.FindFilterText = txtTemp.Text;
            timergetanh.Start();
            lblsoluong.Text = (dACheck.ImageExistCP() + ListImage.Count).ToString();
            dtimeBefore = DateTime.Now;
            txtTemp.Focus();
        }
        void gridView1_RowCellClick(object sender, DevExpress.XtraGrid.Views.Grid.RowCellClickEventArgs e)
        {
            if (e.Clicks == 1)
            {
                txtTemp.Text = e.CellValue.ToString().Substring(4);
            }
            else if (e.Clicks == 2)
            {
                chuoi = "";
                chuoi = grTempV.GetRowCellValue(e.RowHandle, "TemplateName").ToString();
                chuoi = chuoi.Substring(4);
                chuoiclick = 1;
            }
        }
        private void ExitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void frmEntry_FormClosing(object sender, FormClosingEventArgs e)
        {
            timergetanh.Stop();
            try
            {
                if (!finish)
                {
                    if (idimg != 0)
                    {
                        dACheck.Return_Hitpoint(idimg);
                    }
                    else
                    {
                        dACheck.Return_Hitpoint(img.Id);
                        for (int i = 0; i < ListImage.Count; i++)
                        {
                            dACheck.Return_Hitpoint(ListImage[i].Id);
                        }
                    }
                }
            }
            catch { }
            return;
        }





        private void btnRR_Click(object sender, EventArgs e)
        {

        }

        private void btnRL_Click(object sender, EventArgs e)
        {

        }

        private void frmEntry_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.N)
            {
                btnNotgood_Click_1(sender, e);
            }
            else if (e.KeyCode == Keys.Escape)
            {
                this.Close();
            }
            if (e.Control)
            {
                if (e.KeyCode == Keys.Up)
                {
                    view_Image_TN.CurrentZoom = view_Image_TN.CurrentZoom + 0.1f;
                    e.Handled = true;
                }
                else if (e.KeyCode == Keys.Down)
                {
                    view_Image_TN.CurrentZoom = view_Image_TN.CurrentZoom <= 0.1f ? 0.1f : view_Image_TN.CurrentZoom - 0.1f;
                    e.Handled = true;
                }
                else if (e.KeyCode == Keys.Right)
                {
                    view_Image_TN.RotateImage("270");
                    e.Handled = true;
                }
                else if (e.KeyCode == Keys.Left)
                {
                    view_Image_TN.RotateImage("90");
                    e.Handled = true;
                }
                else if (e.KeyCode == Keys.F)
                {
                    view_Image_TN.CurrentZoom = 0.2f;
                    e.Handled = true;
                }
            }

        }

        private void frmEntry_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == 43)
                e.Handled = true;
            if (e.KeyChar == 110)
                e.Handled = true;
        }

        private void frmEntry_KeyUp(object sender, KeyEventArgs e)
        {

        }
        private void btnFullImage_Click(object sender, EventArgs e)
        {

        }

        private void btnzoomout_Click(object sender, EventArgs e)
        {

        }
        private void btnzoomin_Click(object sender, EventArgs e)
        {

        }

        private void bgwGetImage_DoWork(object sender, DoWorkEventArgs e)
        {
            //while (ListImage.Count < 2)
            //{
            //    get_lstimage = dAEntry.Get_Binary(dtimage.Rows[0][0].ToString(), Convert.ToInt32(dtimage.Rows[0][0]), pair);
            //    if (get_lstimage.Rows.Count > 0)
            //    {
            //        try
            //        {
            //            Image2 = dAEntry.byteArrayToImage((byte[])get_lstimage.Rows[0][0]);
            //        }
            //        catch { Image2 = null; }
            //        ListImage.Add(Image2);
            //    }
            //    else
            //        break;
            //}
        }

        private void bgwGetImage_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            lblsoluong.Text = (dACheck.ImageExist()).ToString();
        }

        private void bgwGetImage1_DoWork(object sender, DoWorkEventArgs e)
        {
            //while (ListImage.Count < 2)
            //{
            //    get_lstimage = dAEntry.Get_Binary(dtimage.Rows[0][0].ToString(), Convert.ToInt32(dtimage.Rows[0][0]), pair);
            //    if (get_lstimage.Rows.Count > 0)
            //    {
            //        BOImage_Entry img2 = dAEntry.GetImage(Convert.ToInt32(get_lstimage.Rows[0][1]));
            //        try
            //        {
            //            img2.Imagesource = new Bitmap(Io_Entry.byteArrayToImage(dAEntry.getImageOnServer(img2.PageUrl, batchName)));
            //        }
            //        catch { img2.Imagesource = null; }
            //        ListImage.Add(img2);
            //    }
            //    else
            //        break;
            //}
        }

        private void btnSubmit_Click(object sender, EventArgs e)
        {
            int loisai1 = 0;
            int loisai2 = 0;
            if (txtTemp.Text == "" && chuoi == "")
            {
                if (MessageBox.Show("Mã số trống, bạn có báo Notgood không?", "Thông báo", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
                {
                    btnNotgood_Click_1(sender, e);
                }
                else
                {
                    return;
                }
            }
            if (dtallkt.Select("TemplateName ='" + txtTemp.Text + "'").Length > 0)
                chuoi = txtTemp.Text;
            else
            {
                MessageBox.Show("Vui lòng chọn lại dữ liệu");
                return;
            }
            view_Image_TN.Dispose();
            string rsCheck = "";
            string rsEntr1 = img.Contentp1;
            string rsEntr2 = img.Contentp2;
            rsCheck = chuoi;         
            if (rsEntr1 != chuoi)
                loisai1 = 1;
            if (rsEntr2 != chuoi)
                loisai2 = 1;
            TimeSpan span = DateTime.Now - dtimeBefore;
            int ms = (int)span.TotalMilliseconds;
            dACheck.Insert_ContentP(img.Id, loisai1, loisai2, chuoi.ToString(), userId, ms);
            //dtimage
            imageSource = null;
            if (ListImage.Count > 0)
            {
                img = ListImage[0];
                ListImage.RemoveAt(0);
            }
            else
            {
                if (getanh)
                {
                    finish = true;
                    this.Close();
                    return;
                }
                else
                {
                    while (ListImage.Count == 0)
                    {
                        btnNotgood.Enabled = false;
                        finish = true;
                        MessageBox.Show("Batch đã hoàn thành");
                        this.Close();
                        return;
                    }
                    img = ListImage[0];
                    ListImage.RemoveAt(0);
                }
            }
            try
            {
                //Get Image
                imageSource = (Bitmap)img.Imagesource.Clone();
                view_Image_TN.Image = imageSource;
                view_Image_TN.CurrentZoom = 0.2f;
            }
            catch
            {
                MessageBox.Show("Không load được ảnh: " + img.Uri, "error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                this.Close();
                return;
            }
            idimg = 0;
            txtTemp.ForeColor = Color.Red;
            txtTemp.Text = img.Contentp1;
            numbertrtxt = 0;
            string s1, s2;
            s1 = img.Contentp1;
            s2 = img.Contentp2;
            c = null;
            c = new int[s1.Length + 1, s2.Length + 1];
            LCS(s1, s2);
            BackTrack(s1, s2, s1.Length, s2.Length);
            try
            {
                lbluser1.Text = img.Ms1 + " - " + img.Name1 + " - " + img.Group1;
                lbluser2.Text = img.Ms2 + " - " + img.Name2 + " - " + img.Group2;
            }
            catch
            {
                lbluser1.Text = "";
                lbluser2.Text = "";
            }
            lblpage.Text = img.Uri;
            chuoiclick = 0;
            lblsoluong.Text = (dACheck.ImageExistCP() + ListImage.Count).ToString();
            dtimeBefore = DateTime.Now;
            txtTemp.Focus();
        }

        private void btnNotgood_Click_1(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog1 = new SaveFileDialog();
            saveFileDialog1.Filter = "tiff files (*.tif)|*.tif";
            saveFileDialog1.FileName = img.Uri;
            saveFileDialog1.RestoreDirectory = true;
            if (saveFileDialog1.ShowDialog() == DialogResult.OK)
            {
                string tenfile = saveFileDialog1.FileName;
                imageSource.Save(tenfile, ImageFormat.Tiff);
                dACheck.Insert_ContentNGP(img.Id, userId);
            }
            else
            {
                return;
            }
            view_Image_TN.Dispose();              
            imageSource = null;
            if (ListImage.Count > 0)
            {
                img = ListImage[0];
                ListImage.RemoveAt(0);
            }
            else
            {
                if (getanh)
                {
                    finish = true;
                    this.Close();
                    return;
                }
                else
                {
                    while (ListImage.Count == 0)
                    {
                        btnNotgood.Enabled = false;
                        finish = true;
                        MessageBox.Show("Batch đã hoàn thành");
                        this.Close();
                        return;
                    }
                    img = ListImage[0];
                    ListImage.RemoveAt(0);
                }
            }
            try
            {
                //Get Image
                imageSource = (Bitmap)img.Imagesource.Clone();
                view_Image_TN.Image = imageSource;
                view_Image_TN.CurrentZoom = 0.2f;
            }
            catch
            {
                MessageBox.Show("Không load được ảnh: " + img.Uri, "error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                this.Close();
                return;
            }
            idimg = 0;
            txtTemp.ForeColor = Color.Red;
            txtTemp.Text = img.Contentp1;
            numbertrtxt = 0;
            string s1, s2;
            s1 = img.Contentp1;
            s2 = img.Contentp2;
            c = null;
            c = new int[s1.Length + 1, s2.Length + 1];
            LCS(s1, s2);
            BackTrack(s1, s2, s1.Length, s2.Length);
            try
            {
                lbluser1.Text = img.Ms1 + " - " + img.Name1 + " - " + img.Group1;
                lbluser2.Text = img.Ms2 + " - " + img.Name2 + " - " + img.Group2;
            }
            catch
            {
                lbluser1.Text = "";
                lbluser2.Text = "";
            }
            lblpage.Text = img.Uri;
            grTempV.FindFilterText = txtTemp.Text;
            lblsoluong.Text = (dACheck.ImageExistCP() + ListImage.Count).ToString();
            dtimeBefore = DateTime.Now;
            txtTemp.Focus();
        }

        private void txtTemp_TextChanged(object sender, EventArgs e)
        {
            grTempV.FindFilterText = txtTemp.Text;
            if (grTempV.RowCount > 0)
            {
                chuoi = grTempV.GetRowCellValue(0, "TemplateName").ToString();
            }
            if (grTempV.RowCount == 0)
            {
                chuoi = "";
            }
        }

        private void btnRtR_Click(object sender, EventArgs e)
        {
            view_Image_TN.RotateImage("270");
        }

        private void btnRtL_Click(object sender, EventArgs e)
        {
            view_Image_TN.RotateImage("90");
        }

        private void btnFull_Click(object sender, EventArgs e)
        {
            view_Image_TN.CurrentZoom = 0.2f;
        }

        private void btnZO_Click(object sender, EventArgs e)
        {
            view_Image_TN.CurrentZoom = view_Image_TN.CurrentZoom <= 0.1f ? 0.1f : view_Image_TN.CurrentZoom - 0.1f;
        }

        private void btnZI_Click(object sender, EventArgs e)
        {
            view_Image_TN.CurrentZoom = view_Image_TN.CurrentZoom + 0.1f;
        }
        #region Compare string
        static int max(int a, int b)
        {
            return (a > b) ? a : b;
        }
        static int[,] c;
        //Prints one LCS
        private string BackTrack(string s1, string s2, int i, int j)
        {
            if (i == 0 || j == 0)
                return "";
            if (s1[i - 1] == s2[j - 1])
            {
                txtTemp.SelectionStart = i - 1;
                txtTemp.SelectionLength = 1;
                txtTemp.SelectionColor = Color.Black;
                return BackTrack(s1, s2, i - 1, j - 1) + s1[i - 1];
            }
            else if (c[i - 1, j] > c[i, j - 1])
                return BackTrack(s1, s2, i - 1, j);

            else
                return BackTrack(s1, s2, i, j - 1);

        }
        //Nghịch       
        private string BackTrack2(string s1, string s2, int i, int j)
        {
            if (i == 0 || j == 0)
                return "";
            if (s1[i - 1] == s2[j - 1])
            {
                return BackTrack2(s1, s2, i - 1, j - 1) + s1[i - 1];
            }
            else if (c[i - 1, j] > c[i, j - 1])
                return BackTrack2(s1, s2, i - 1, j);

            else
                return BackTrack2(s1, s2, i, j - 1);

        }
        static int LCS(string s1, string s2)
        {
            for (int i = 1; i <= s1.Length; i++)
                c[i, 0] = 0;
            for (int i = 1; i <= s2.Length; i++)
                c[0, i] = 0;

            for (int i = 1; i <= s1.Length; i++)
                for (int j = 1; j <= s2.Length; j++)
                {
                    if (s1[i - 1] == s2[j - 1])
                        c[i, j] = c[i - 1, j - 1] + 1;
                    else
                    {
                        c[i, j] = max(c[i - 1, j], c[i, j - 1]);

                    }

                }

            return c[s1.Length, s2.Length];

        }
        #endregion

        private void txtTemp_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                if (txtTemp.Text == img.Contentp1)
                {
                    txtTemp.SelectionStart = 0;
                    txtTemp.SelectionLength = txtTemp.Text.Length;
                    txtTemp.SelectionColor = Color.Red;
                    txtTemp.Text = img.Contentp2;
                    numbertrtxt = txtTemp.TabIndex;
                    string s1, s2;
                    s1 = img.Contentp2;
                    s2 = img.Contentp1;
                    c = null;
                    c = new int[s1.Length + 1, s2.Length + 1];
                    LCS(s1, s2);
                    BackTrack(s1, s2, s1.Length, s2.Length);
                }
                else if (txtTemp.Text == img.Contentp2)
                {
                    txtTemp.SelectionStart = 0;
                    txtTemp.SelectionLength = txtTemp.Text.Length;
                    txtTemp.SelectionColor = Color.Red;
                    txtTemp.Text = img.Contentp1;
                    numbertrtxt = txtTemp.TabIndex;
                    string s1, s2;
                    s1 = img.Contentp1;
                    s2 = img.Contentp2;
                    c = null;
                    c = new int[s1.Length + 1, s2.Length + 1];
                    LCS(s1, s2);
                    BackTrack(s1, s2, s1.Length, s2.Length);
                }
                else
                {
                    txtTemp.SelectionStart = 0;
                    txtTemp.SelectionLength = txtTemp.Text.Length;
                    txtTemp.SelectionColor = Color.Red;
                    txtTemp.Text = img.Contentp1;
                    numbertrtxt = txtTemp.TabIndex;
                    string s1, s2;
                    s1 = img.Contentp1;
                    s2 = img.Contentp2;
                    c = null;
                    c = new int[s1.Length + 1, s2.Length + 1];
                    LCS(s1, s2);
                    BackTrack(s1, s2, s1.Length, s2.Length);
                }
            }
        }

        private void txtTemp_TextChanged_1(object sender, EventArgs e)
        {
            grTempV.FindFilterText = txtTemp.Text;
        }

        private void txtTemp_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == 43)
                e.Handled = true;
        }

        private void timergetanh_Tick(object sender, EventArgs e)
        {
            if (ListImage.Count < 2)
            {
                try
                {
                    int idmg = dACheck.GetIdCheckP();
                    if (idmg > 0)
                    {
                        BOImageContent_Check img2 = dACheck.GetImageCheckP(idmg);
                        try
                        {
                            img2.Imagesource = new Bitmap(Io_Entry.byteArrayToImage(dACheck.getImageOnServer(img2.Uri)));
                        }
                        catch { img2.Imagesource = null; }
                        ListImage.Add(img2);
                        if (ListImage.Count == 0)
                        {
                            getanh = true;
                        }
                    }
                }
                catch
                {
                }
            }
        }
    }
}
